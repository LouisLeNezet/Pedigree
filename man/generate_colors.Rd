% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate_colors.R
\docType{methods}
\name{generate_colors}
\alias{generate_colors}
\alias{generate_colors,character-method}
\alias{generate_colors,character}
\alias{generate_colors,numeric-method}
\alias{generate_colors,numeric}
\alias{generate_colors,logical-method}
\alias{generate_colors,logical}
\alias{generate_colors,Pedigree-method}
\alias{generate_colors,Pedigree}
\title{Process the colors based on affection and availability}
\usage{
generate_colors(obj, ...)

\S4method{generate_colors}{character}(
  obj,
  avail,
  mods_aff = NULL,
  threshold = 0.5,
  sup_thres_aff = TRUE,
  keep_full_scale = FALSE,
  breaks = 3,
  colors_aff = c("yellow2", "red"),
  colors_unaff = c("white", "steelblue4"),
  colors_avail = c("green", "black")
)

\S4method{generate_colors}{numeric}(
  obj,
  avail,
  mods_aff = NULL,
  threshold = 0.5,
  sup_thres_aff = TRUE,
  keep_full_scale = FALSE,
  breaks = 3,
  colors_aff = c("yellow2", "red"),
  colors_unaff = c("white", "steelblue4"),
  colors_avail = c("green", "black")
)

\S4method{generate_colors}{logical}(
  obj,
  avail,
  mods_aff = NULL,
  threshold = 0.5,
  sup_thres_aff = TRUE,
  keep_full_scale = FALSE,
  breaks = 3,
  colors_aff = c("yellow2", "red"),
  colors_unaff = c("white", "steelblue4"),
  colors_avail = c("green", "black")
)

\S4method{generate_colors}{Pedigree}(
  obj,
  col_aff = "affected",
  add_to_scale = TRUE,
  col_avail = "avail",
  mods_aff = NULL,
  threshold = 0.5,
  sup_thres_aff = TRUE,
  keep_full_scale = FALSE,
  breaks = 3,
  colors_aff = c("yellow2", "red"),
  colors_unaff = c("white", "steelblue4"),
  colors_avail = c("green", "black"),
  reset = TRUE
)
}
\arguments{
\item{obj}{A pedigree object or a vector containing the affection status for
each individuals. The affection status can be numeric, logical or character.}

\item{...}{Other parameters to pass to the \code{generate_colors} function}

\item{avail}{A numeric vector of availability status of each individual
(e.g., genotyped). The values are:
\itemize{
\item \code{0}  : unavailable
\item \code{1}  : available
\item \code{NA} : availability not known
}}

\item{mods_aff}{Vector of modality to consider as affected in the case
where the \code{values} is a factor.}

\item{threshold}{Numeric value separating the affected and healthy subject
in the case where the \code{values} is numeric.}

\item{sup_thres_aff}{Boolean defining if the affected individual are above
the threshold or not. If TRUE, the individuals will be considered affected
if the value of \code{values} is stricly above the \code{threshold}. If FALSE, the
individuals will be considered affected if the value is stricly under the
\code{threshold}.}

\item{keep_full_scale}{Boolean defining if the affection values need to
be set as a scale. If \code{values} is numeric the filling scale will be
calculated based on the values and the number of breaks given.
If \code{values} isn't numeric then each levels will get it's own color}

\item{breaks}{Number of breaks to use when using full scale with numeric
values. The same number of breaks will be done for values from affected
individuals and unaffected individuals.}

\item{colors_aff}{Set of increasing colors to use for the filling of the
affected individuls.}

\item{colors_unaff}{Set of increasing colors to use for the filling of the
unaffected individuls.}

\item{colors_avail}{Set of 2 colors to use for the box's border of an
individual. The first color will be used for available individual (avail
== 1) and the second for the unavailable individual (avail == 0).}

\item{col_aff}{A string with the column name to use for the affection status.}

\item{add_to_scale}{Boolean defining if the scales need to be added to the
existing scales or if they need to replace the existing scales.}

\item{col_avail}{The name of the column containing the availability status.}

\item{reset}{If \code{TRUE} the scale of the specified column will be reset if
already present.}
}
\value{
\subsection{When used with a dataframe :}{

A list of two elements
\itemize{
\item The processed dataframe with the \code{affected} and \code{avail} columns
processed accordingly
\item A dataframe containing the description of each modality of the scale
}
}

\subsection{When used with a pedigree object :}{

The pedigree object with the \code{affected} and \code{avail} columns
processed accordingly
The pedigree scales slots are updated
}
}
\description{
Process the colors based on affection and availability
}
\details{
Perform transformation uppon a dataframe given to compute
the colors for the filling and the border of the individuals based
on the affection and availability status.
}
\examples{
data("sampleped")
ped <- pedigree(sampleped)
generate_colors(ped, "affected", add_to_scale=FALSE)$scales
}
