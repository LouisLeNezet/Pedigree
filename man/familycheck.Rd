% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/familycheck.R
\name{familycheck}
\alias{familycheck}
\title{Check family}
\usage{
familycheck(famid, id, father.id, mother.id, newfam)
}
\arguments{
\item{famid}{A vector of family identifiers}

\item{id}{A vector of unique subject identifiers}

\item{father.id}{Vector containing the id of the biological father}

\item{mother.id}{Vector containing the id of the biological mother}

\item{newfam}{The result of a call to `makefamid`. If this has already
been computed by the user, adding it as an argument shortens the running
time somewhat.}
}
\value{
a data frame with one row for each unique family id in the
`famid` argument. Components of the output are:
## famid
The family id, as entered into the data set
## n
Number of subjects in the family
## unrelated
Number of them that appear to be unrelated to
anyone else in the entire pedigree set.  This is usually marry-ins with no
children (in the pedigree), and if so are not a problem.
## split
Number of unique "new" family ids.
0 = no one in this "family" is related to anyone else (not good)
1 = everythings is fine
2+= the family appears to be a set of disjoint trees.
Are you missing some of the people?
## join
Number of other families that had a unique
famid, but are actually joined to this one.  0 is the hope.
}
\description{
Error check for a family classification
}
\details{
Given a family id vector, also compute the familial grouping from first
principles using the parenting data, and compare the results.

The `makefamid` function is used to create a de novo family id from the
parentage data, and this is compared to the family id given in the data.

If there are any joins, then an attribute "join" is attached.
It will be a matrix with famid as row labels, new-family-id as the columns,
and the number of subjects as entries.
}
\examples{

# use 2 sample peds
data(sample.ped)
pedAll <- with(sample.ped, pedigree(id, father, mother, sex,
  affected = cbind(affected, avail), famid = ped
))

## check them giving separate ped ids
fcheck.sep <- with(sample.ped, familycheck(ped, id, father, mother))
fcheck.sep

## check assigning them same ped id
fcheck.combined <- with(sample.ped, familycheck(rep(1, nrow(sample.ped)), id, father, mother))
fcheck.combined

# make person 120's father be her son.
sample.ped[20, 3] <- 131
fcheck1.bad <- try(
  {
    with(sample.ped, familycheck(ped, id, father, mother))
  },
  silent = FALSE
)

## fcheck1.bad is a try-error

}
\seealso{
`makefamid`, `makekinship`
}
\keyword{genetics}
