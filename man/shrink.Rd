% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shrink.R
\name{shrink}
\alias{shrink}
\alias{pedigree.shrink}
\alias{print.pedigree.shrink}
\title{Shrink pedigree object}
\usage{
shrink(ped, avail = ped$ped$avail, affected = ped$ped$affected, max_bits = 16)
}
\arguments{
\item{ped}{Pedigree object created by the pedigree function,}

\item{avail}{Vector of binary availability status (0/1), i.e. having data,
or sample available}

\item{affected}{Vector of binary affected status (0/1/NA). If NULL, uses
first column of the pedigree object affected matrix.}

\item{max_bits}{Optional, the bit size for which to shrink the pedigree}

\item{x}{Pedigree.shrink object used in method functions}

\item{...}{Optional arguments passed to internal functions}
}
\value{
Pedigree object shrinked to the desired size
}
\description{
Shrink pedigree object to specified bit size with priority placed on
trimming uninformative subjects. The algorithm is useful for getting a
pedigree condensed to a minimally informative size for algorithms or testing
that are limited by size of the pedigree.
}
\details{
Iteratively remove subjects from the pedigree. The random removal of members
was previously controlled by a seed argument, but we remove this, forcing
users to control randomness outside the function. First remove uninformative
subjects, i.e., unavailable (not genotyped) with no available descendants.
Next, available terminal subjects with unknown phenotype if both parents
available. Last, iteratively shrinks pedigrees by preferentially removing
individuals (chosen at random if there are multiple of the same status):
1. Subjects with unknown affected status
2. Subjects with unaffected affected status
3. Affected subjects.
}
\examples{
data(sampleped)
pedAll <- with(sampleped, pedigree(id, father, mother, sex,
  affected = cbind(affected, avail), famid = ped
))
ped1 <- pedAll['1']
ped1trim <- pedigree.shrink(ped1, max_bits = 12)

}
\seealso{
\\code{\\link{pedigree}}, \\code{\\link{plot.pedigree.shrink}}
}
\author{
Original by Dan Schaid, updated to kinship2 by Jason Sinnwell
}
